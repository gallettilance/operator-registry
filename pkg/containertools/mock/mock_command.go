// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/operator-framework/operator-registry/pkg/containertools (interfaces: CommandRunner)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// ContainerToolsCommandRunner is a mock of CommandRunner interface
type ContainerToolsCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *ContainerToolsCommandRunnerMockRecorder
}

// ContainerToolsCommandRunnerMockRecorder is the mock recorder for ContainerToolsCommandRunner
type ContainerToolsCommandRunnerMockRecorder struct {
	mock *ContainerToolsCommandRunner
}

// NewContainerToolsCommandRunner creates a new mock instance
func NewContainerToolsCommandRunner(ctrl *gomock.Controller) *ContainerToolsCommandRunner {
	mock := &ContainerToolsCommandRunner{ctrl: ctrl}
	mock.recorder = &ContainerToolsCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ContainerToolsCommandRunner) EXPECT() *ContainerToolsCommandRunnerMockRecorder {
	return m.recorder
}

// GetToolName mocks base method
func (m *ContainerToolsCommandRunner) GetToolName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToolName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToolName indicates an expected call of GetToolName
func (mr *ContainerToolsCommandRunnerMockRecorder) GetToolName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToolName", reflect.TypeOf((*ContainerToolsCommandRunner)(nil).GetToolName))
}

// Pull mocks base method
func (m *ContainerToolsCommandRunner) Pull(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *ContainerToolsCommandRunnerMockRecorder) Pull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*ContainerToolsCommandRunner)(nil).Pull), arg0)
}

// Save mocks base method
func (m *ContainerToolsCommandRunner) Save(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *ContainerToolsCommandRunnerMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*ContainerToolsCommandRunner)(nil).Save), arg0, arg1)
}
